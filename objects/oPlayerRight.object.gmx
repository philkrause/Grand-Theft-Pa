<!--This Document is generated by GameMaker, if you edit it by hand then you do so at your own risk!-->
<object>
  <spriteName>sPlayerIdle</spriteName>
  <solid>0</solid>
  <visible>-1</visible>
  <depth>2</depth>
  <persistent>0</persistent>
  <parentName>&lt;undefined&gt;</parentName>
  <maskName>&lt;undefined&gt;</maskName>
  <events>
    <event eventtype="0" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>


grav = 10 / room_speed

vsp = 0
hsp = 0
jumpspeed = 500 / room_speed
movespeed = 100 /  room_speed
image_index = 0
image_speed = 8/room_speed
slidespeed = 10

AimSpeed = 0

FacingRight = image_angle
FacingLeft = image_angle + 180
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="3" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>    
                         //Get the player's input
        key_right = keyboard_check(ord('D'));
        key_left = -keyboard_check(ord('A'));
        key_jump = keyboard_check_pressed(vk_space);
        


   //React to inputs
move = key_left + key_right;
            
hsp = move * movespeed;






if vsp &lt; 10 {vsp += grav}
 //Vertical Collision
                        if (place_meeting(x, y + vsp,oWall)){
                            while (!place_meeting(x,y+sign(vsp),oWall)){
                                y += sign(vsp);
                                }
                                
                                vsp = 0;
                        }
                        
y+= vsp;   
  //Floor Collision
                       if (place_meeting(x,y+1,oWall)){
                            vsp = 0
                            
                            vsp = key_jump * -jumpspeed
                       }
                        
                        
                         
  //Horizontal Collision
                        
                        if (place_meeting(x + hsp,y,oWall)){
                            while (!place_meeting(x+sign(hsp),y,oWall)){
                                x += sign(hsp);
                                }
                                
                                hsp = 0;
                        }
    
                               
x+= hsp;                  
 
        
            
         
       
  //Animation   
  
if (move!=0) image_xscale = move;
  
if (place_meeting(x,y+1,oWall)) {


        if (move!= 0) and !instance_exists(oPlayerArm) sprite_index = sPlayerWalk;
        
        if move =  0 and !instance_exists(oPlayerArm) {
        
            
            sprite_index = sPlayerIdle
       
        
       }    
       
        //Aiming  What a ride...
        

        if mouse_check_button_pressed(mb_right) {
        
                instance_create(x-3,y-5,oPlayerArm)
                sprite_index = sPlayerBody
                movespeed = 0
                

        } 
     
         if mouse_check_button_released(mb_right)  {                 
                 movespeed = 300 / room_speed                             
                 sprite_index = sPlayerIdle
            
        }    
   
       
         
}   
</string>
          </argument>
        </arguments>
      </action>
    </event>
  </events>
  <PhysicsObject>0</PhysicsObject>
  <PhysicsObjectSensor>0</PhysicsObjectSensor>
  <PhysicsObjectShape>0</PhysicsObjectShape>
  <PhysicsObjectDensity>0.5</PhysicsObjectDensity>
  <PhysicsObjectRestitution>0.100000001490116</PhysicsObjectRestitution>
  <PhysicsObjectGroup>0</PhysicsObjectGroup>
  <PhysicsObjectLinearDamping>0.100000001490116</PhysicsObjectLinearDamping>
  <PhysicsObjectAngularDamping>0.100000001490116</PhysicsObjectAngularDamping>
  <PhysicsObjectFriction>0.200000002980232</PhysicsObjectFriction>
  <PhysicsObjectAwake>-1</PhysicsObjectAwake>
  <PhysicsObjectKinematic>0</PhysicsObjectKinematic>
  <PhysicsShapePoints/>
</object>
