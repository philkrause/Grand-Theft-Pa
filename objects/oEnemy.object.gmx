<!--This Document is generated by GameMaker, if you edit it by hand then you do so at your own risk!-->
<object>
  <spriteName>sEnemyWalk</spriteName>
  <solid>0</solid>
  <visible>-1</visible>
  <depth>5</depth>
  <persistent>0</persistent>
  <parentName>&lt;undefined&gt;</parentName>
  <maskName>&lt;undefined&gt;</maskName>
  <events>
    <event eventtype="0" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>dir = -1;
movespeed =.5; 
grav = .2;
hsp =0 ;
vsp = 0 ;

SecBetShot = 100
SecSinShot = 0

DistancetoPlayer = 8

EnemyHeight = sprite_get_height(sEnemy)

image_speed = 10 / room_speed


/*
grav = 10 / room_speed

vsp = 0

jumpspeed = 0
movespeed = 80 /  room_speed
image_index = 0
image_speed = 0







Headshot = collision_circle(x,y,10,oBullet,true,false)

   
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="3" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>hsp = dir * movespeed;
vsp += grav;







//Horizontal Collision        
                       
                         if (place_meeting(x + hsp,y,oWall)){
                            while (!place_meeting(x+sign(hsp),y,oWall)){
                                x += sign(hsp);
                                }
                                
                                hsp = 0;
                                dir *= -1
                                
                                
                                
                        }
                        

x += hsp;

//Vertical  Collision
                 if (place_meeting(x, y + vsp,oWall)){
                            while (!place_meeting(x,y+sign(vsp),oWall)){
                                y += sign(vsp);
                                }
                                
                                vsp = 0;
                        }          


y +=vsp;



 

SecSinShot = SecSinShot + 1


    
if image_xscale = -1 and oPlayerRight.x &gt; x {
    //Shooting   
        if  
            distance_to_object(oPlayerRight) &lt; 100 * DistancetoPlayer and SecSinShot&gt;=SecBetShot and 
            !collision_line(x, y, oPlayerRight.x, oPlayerRight.y, oWall, false, false) 
                { 
               
                
                    instance_create(x-25,y,oEnemyBullet)
                    oEnemyBullet.direction = image_angle + 180
                    oEnemyBullet.speed = 2300/room_speed
                    audio_play_sound(aGlockBullet,0,0)
                    SecSinShot = 0
        }
}

if image_xscale = 0 and oPlayerRight.x &lt; x {
    //Shooting   
        if  
            distance_to_object(oPlayerRight) &lt; 100 * DistancetoPlayer and SecSinShot&gt;=SecBetShot and 
            !collision_line(x, y, oPlayerRight.x, oPlayerRight.y, oWall, false, false) 
                { 
               
                
                    instance_create(x-25,y,oEnemyBullet)
                    oEnemyBullet.direction = image_angle + 180
                    oEnemyBullet.speed = 2300/room_speed
                    audio_play_sound(aGlockBullet,0,0)
                    SecSinShot = 0
        }
}



HeadShot = collision_circle(x,y,15,oBullet,false,false)
        
Height = sprite_get_height(0)
   
//Death
if place_meeting(x,y - (Height/4),oBullet){
    instance_create(x,y+7,oEnemyHeadShot,)
    instance_destroy()
    BrainExplode()
    instance_create(x,y-9,choose(oBlood,oBlood1,oBlood2))
    with oBullet{instance_destroy()}
    
}    
if place_meeting(x,y + (Height/2),oBullet) {
            instance_create(x,y+7,oEnemyChestShot)
            instance_create(x,y,choose(oBlood,oBlood1,oBlood2))
            instance_destroy()
            with oBullet{instance_destroy()}
            BrainExplode()
}
    
//

//Enemy Movement

//if hspeed &lt; 0 {
//    image_xscale = -1
//}



     
   
/*Animation


if movespeed&gt; 0 {
   sprite_index = sEnemyWalk

}


/*
if  distance_to_object(oPlayerRight) &lt; 100 * DistancetoPlayer  {
    
    sprite_index = sEnemyAim
}
</string>
          </argument>
        </arguments>
      </action>
    </event>
  </events>
  <PhysicsObject>0</PhysicsObject>
  <PhysicsObjectSensor>0</PhysicsObjectSensor>
  <PhysicsObjectShape>0</PhysicsObjectShape>
  <PhysicsObjectDensity>0.5</PhysicsObjectDensity>
  <PhysicsObjectRestitution>0.100000001490116</PhysicsObjectRestitution>
  <PhysicsObjectGroup>0</PhysicsObjectGroup>
  <PhysicsObjectLinearDamping>0.100000001490116</PhysicsObjectLinearDamping>
  <PhysicsObjectAngularDamping>0.100000001490116</PhysicsObjectAngularDamping>
  <PhysicsObjectFriction>0.200000002980232</PhysicsObjectFriction>
  <PhysicsObjectAwake>-1</PhysicsObjectAwake>
  <PhysicsObjectKinematic>0</PhysicsObjectKinematic>
  <PhysicsShapePoints/>
</object>
